<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\rp_first\rp_first.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\rp_first\rp_first.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Thu Sep 22 18:45:59 2022
<BR><P>
<H3>Maximum Stack Usage =        348 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
imu_sensor_init &rArr; BMI_Init &rArr; Set_gyro &rArr; bmi2_get_sensor_config &rArr; get_step_count_params_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[39]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[39]">ADC_IRQHandler</a><BR>
 <LI><a href="#[21]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">BusFault_Handler</a><BR>
 <LI><a href="#[20]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">MemManage_Handler</a><BR>
 <LI><a href="#[1e]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">NMI_Handler</a><BR>
 <LI><a href="#[83]">StartDefaultTask</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[83]">StartDefaultTask</a><BR>
 <LI><a href="#[22]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">UsageFault_Handler</a><BR>
 <LI><a href="#[19]">judge_sensor_update</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">judge_sensor_update</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[39]">ADC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[21]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3b]">CAN1_RX0_IRQHandler</a> from stm32f4xx_it.o(i.CAN1_RX0_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3c]">CAN1_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3d]">CAN1_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3a]">CAN1_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[67]">CAN2_RX0_IRQHandler</a> from stm32f4xx_it.o(i.CAN2_RX0_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[68]">CAN2_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[69]">CAN2_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[66]">CAN2_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1c]">CAN_SendSingleData</a> from can_drv.o(i.CAN_SendSingleData) referenced 28 times from chassis_motor.o(.data)
 <LI><a href="#[f]">CAN_rxDataHandler</a> from cap_protocol.o(i.CAN_rxDataHandler) referenced 2 times from super.o(.data)
 <LI><a href="#[2]">Ctrl_mode_change</a> from state.o(i.Ctrl_mode_change) referenced 2 times from state.o(.data)
 <LI><a href="#[75]">DCMI_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[32]">DMA1_Stream0_IRQHandler</a> from stm32f4xx_it.o(i.DMA1_Stream0_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[33]">DMA1_Stream1_IRQHandler</a> from stm32f4xx_it.o(i.DMA1_Stream1_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[34]">DMA1_Stream2_IRQHandler</a> from stm32f4xx_it.o(i.DMA1_Stream2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[35]">DMA1_Stream3_IRQHandler</a> from stm32f4xx_it.o(i.DMA1_Stream3_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[36]">DMA1_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[37]">DMA1_Stream5_IRQHandler</a> from stm32f4xx_it.o(i.DMA1_Stream5_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[38]">DMA1_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[56]">DMA1_Stream7_IRQHandler</a> from stm32f4xx_it.o(i.DMA1_Stream7_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5f]">DMA2_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[60]">DMA2_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[61]">DMA2_Stream2_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[62]">DMA2_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[63]">DMA2_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6b]">DMA2_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6c]">DMA2_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6d]">DMA2_Stream7_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream7_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[24]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[64]">ETH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[65]">ETH_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2d]">EXTI0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4f]">EXTI15_10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2e]">EXTI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2f]">EXTI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[30]">EXTI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[31]">EXTI4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3e]">EXTI9_5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2b]">FLASH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[57]">FMC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[77]">FPU_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4]">Func_mode_change</a> from state.o(i.Func_mode_change) referenced 2 times from state.o(.data)
 <LI><a href="#[76]">HASH_RNG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1f]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[47]">I2C1_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[46]">I2C1_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[49]">I2C2_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[48]">I2C2_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[70]">I2C3_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6f]">I2C3_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[20]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3]">Move_mode_change</a> from state.o(i.Move_mode_change) referenced 2 times from state.o(.data)
 <LI><a href="#[1e]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6a]">OTG_FS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[51]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[72]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[71]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[74]">OTG_HS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[73]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[28]">PVD_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[25]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2c]">RCC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[50]">RTC_Alarm_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2a]">RTC_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1d]">Reset_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[58]">SDIO_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4a]">SPI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4b]">SPI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5a]">SPI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1]">STATE_INIT</a> from state.o(i.STATE_INIT) referenced 2 times from state.o(.data)
 <LI><a href="#[23]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[83]">StartDefaultTask</a> from freertos.o(i.StartDefaultTask) referenced from freertos.o(.constdata)
 <LI><a href="#[85]">Start_chassis_task</a> from chassis_task.o(i.Start_chassis_task) referenced from freertos.o(.constdata)
 <LI><a href="#[84]">Start_led</a> from led_task.o(i.Start_led) referenced from freertos.o(.constdata)
 <LI><a href="#[86]">Start_normal_task</a> from normal_task.o(i.Start_normal_task) referenced from freertos.o(.constdata)
 <LI><a href="#[26]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[79]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[29]">TAMP_STAMP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3f]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[42]">TIM1_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[41]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[40]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[43]">TIM2_IRQHandler</a> from stm32f4xx_it.o(i.TIM2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[44]">TIM3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[45]">TIM4_IRQHandler</a> from stm32f4xx_it.o(i.TIM4_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[59]">TIM5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5d]">TIM6_DAC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5e]">TIM7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[52]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[55]">TIM8_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[54]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[53]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5b]">UART4_IRQHandler</a> from stm32f4xx_it.o(i.UART4_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5c]">UART5_IRQHandler</a> from stm32f4xx_it.o(i.UART5_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[7d]">UART_DMAAbortOnError</a> from stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[4c]">USART1_IRQHandler</a> from stm32f4xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4d]">USART2_IRQHandler</a> from stm32f4xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4e]">USART3_IRQHandler</a> from stm32f4xx_it.o(i.USART3_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6e]">USART6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[22]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[27]">WWDG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[7a]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[d]">cap_rp_ctrl</a> from super.o(i.cap_rp_ctrl) referenced 2 times from super.o(.data)
 <LI><a href="#[e]">cap_rp_heart_beat</a> from super.o(i.cap_rp_heart_beat) referenced 2 times from super.o(.data)
 <LI><a href="#[7b]">dma_m0_rxcplt_callback</a> from uart_drv.o(i.dma_m0_rxcplt_callback) referenced from uart_drv.o(i.DMAEx_MultiBufferStart_NoIT)
 <LI><a href="#[7c]">dma_m1_rxcplt_callback</a> from uart_drv.o(i.dma_m1_rxcplt_callback) referenced from uart_drv.o(i.DMAEx_MultiBufferStart_NoIT)
 <LI><a href="#[b]">imu_sensor_check</a> from imu.o(i.imu_sensor_check) referenced 2 times from imu.o(.data)
 <LI><a href="#[c]">imu_sensor_heart_beat</a> from imu.o(i.imu_sensor_heart_beat) referenced 2 times from imu.o(.data)
 <LI><a href="#[9]">imu_sensor_init</a> from soft_iic_potocal.o(i.imu_sensor_init) referenced 2 times from imu.o(.data)
 <LI><a href="#[a]">imu_sensor_update</a> from soft_iic_potocal.o(i.imu_sensor_update) referenced 2 times from imu.o(.data)
 <LI><a href="#[1a]">judge_sensor_check</a> from judge_sensor.o(i.judge_sensor_check) referenced 2 times from judge_sensor.o(.data)
 <LI><a href="#[1b]">judge_sensor_heart_beat</a> from judge_sensor.o(i.judge_sensor_heart_beat) referenced 2 times from judge_sensor.o(.data)
 <LI><a href="#[18]">judge_sensor_init</a> from judge_infantrypotocol.o(i.judge_sensor_init) referenced 2 times from judge_sensor.o(.data)
 <LI><a href="#[19]">judge_sensor_update</a> from judge_infantrypotocol.o(i.judge_sensor_update) referenced 2 times from judge_sensor.o(.data)
 <LI><a href="#[78]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[12]">motor_check</a> from motor.o(i.motor_check) referenced 2 times from motor.o(.data)
 <LI><a href="#[13]">motor_heart_beat</a> from motor.o(i.motor_heart_beat) referenced 2 times from motor.o(.data)
 <LI><a href="#[10]">motor_init</a> from motor.o(i.motor_init) referenced 2 times from motor.o(.data)
 <LI><a href="#[11]">motor_update</a> from motor.o(i.motor_update) referenced 2 times from motor.o(.data)
 <LI><a href="#[82]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[81]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[7]">rc_sensor_check</a> from rc.o(i.rc_sensor_check) referenced 2 times from rc.o(.data)
 <LI><a href="#[8]">rc_sensor_heart_beat</a> from rc.o(i.rc_sensor_heart_beat) referenced 2 times from rc.o(.data)
 <LI><a href="#[5]">rc_sensor_init</a> from rc.o(i.rc_sensor_init) referenced 2 times from rc.o(.data)
 <LI><a href="#[6]">rc_sensor_update</a> from rc.o(i.rc_sensor_update) referenced 2 times from rc.o(.data)
 <LI><a href="#[80]">user_delay_us</a> from bmi2_common.o(i.user_delay_us) referenced from bmi2_common.o(i.bmi2_interface_selection)
 <LI><a href="#[7e]">user_i2c_reg_read</a> from bmi2_common.o(i.user_i2c_reg_read) referenced from bmi2_common.o(i.bmi2_interface_selection)
 <LI><a href="#[7f]">user_i2c_reg_write</a> from bmi2_common.o(i.user_i2c_reg_write) referenced from bmi2_common.o(i.bmi2_interface_selection)
 <LI><a href="#[16]">vision_check</a> from vision_sensor.o(i.vision_check) referenced 2 times from vision_sensor.o(.data)
 <LI><a href="#[17]">vision_heart_beat</a> from vision_sensor.o(i.vision_heart_beat) referenced 2 times from vision_sensor.o(.data)
 <LI><a href="#[14]">vision_init</a> from vision_potocol.o(i.vision_init) referenced 2 times from vision_sensor.o(.data)
 <LI><a href="#[15]">vision_update</a> from vision_potocol.o(i.vision_update) referenced 2 times from vision_sensor.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[7a]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[282]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[87]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[9a]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[283]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[284]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[285]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[286]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[287]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[23]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[280]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[27f]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[25]"></a>PendSV_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[27a]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[1d]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[23b]"></a>arm_cos_f32</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, arm_cos_f32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_sensor_update
</UL>

<P><STRONG><a name="[23c]"></a>arm_sin_f32</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, arm_sin_f32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_sensor_update
</UL>

<P><STRONG><a name="[8a]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[23d]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vision_check
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_sensor_update
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vision_update
</UL>

<P><STRONG><a name="[19b]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
</UL>

<P><STRONG><a name="[288]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[289]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[28a]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_idle_callback
</UL>

<P><STRONG><a name="[11b]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_MspInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[28b]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[90]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[94]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[95]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[96]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Get_EulerAngle
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[97]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[a7]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Get_EulerAngle
</UL>

<P><STRONG><a name="[98]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Get_EulerAngle
</UL>

<P><STRONG><a name="[8c]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[28c]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[28d]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[28e]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[28f]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[290]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[92]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[88]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[291]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[292]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[293]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>AD_Channel</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, rc.o(i.AD_Channel))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Channel_Update
</UL>

<P><STRONG><a name="[9c]"></a>AUTO_SHOOT_CTRL</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, auto.o(i.AUTO_SHOOT_CTRL))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AUTO_SHOOT_CTRL &rArr; SHOT_AUTO_JUDGE
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZM_AUTO_SHOOT
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHOT_AUTO_JUDGE
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Shoot_Ctrl
</UL>

<P><STRONG><a name="[9f]"></a>AUTO_SHOOT_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, state.o(i.AUTO_SHOOT_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = AUTO_SHOOT_init &rArr; SHOT_AUTO_INIT &rArr; TIM4_VISION_INIT &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHOT_AUTO_INIT
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_state_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_mode_init
</UL>

<P><STRONG><a name="[182]"></a>Auto_Reset</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, key.o(i.Auto_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KB_CTRL
</UL>

<P><STRONG><a name="[a2]"></a>Auto_Shoot_Ctrl</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, key.o(i.Auto_Shoot_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Auto_Shoot_Ctrl &rArr; AUTO_SHOOT_CTRL &rArr; SHOT_AUTO_JUDGE
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_SHOOT_CTRL
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KB_CTRL
</UL>

<P><STRONG><a name="[a3]"></a>BMI_Get_EulerAngle</STRONG> (Thumb, 1170 bytes, Stack size 72 bytes, bmi.o(i.BMI_Get_EulerAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = BMI_Get_EulerAngle &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inVSqrt
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsb_to_mps2
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsb_to_dps
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_sensor_update
</UL>

<P><STRONG><a name="[aa]"></a>BMI_Get_GRO</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, bmi.o(i.BMI_Get_GRO))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BMI_Get_GRO &rArr; MPU_Read_Byte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_us &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_sensor_init
</UL>

<P><STRONG><a name="[ac]"></a>BMI_Get_RawData</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, bmi.o(i.BMI_Get_RawData))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = BMI_Get_RawData &rArr; MPU_Read_all &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_us &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_all
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_sensor_update
</UL>

<P><STRONG><a name="[ae]"></a>BMI_Init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, bmi.o(i.BMI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = BMI_Init &rArr; Set_gyro &rArr; bmi2_get_sensor_config &rArr; get_step_count_params_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_sensor_enable
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_interface_selection
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_error_codes_print_result
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi270_init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_gyro
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_accel
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_sensor_init
</UL>

<P><STRONG><a name="[b5]"></a>Barrel_Change_Key</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, key.o(i.Barrel_Change_Key))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Barrel_Change_Key
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KB_CTRL
</UL>

<P><STRONG><a name="[1ca]"></a>Barrel_Unload</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, shoot.o(i.Barrel_Unload))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shot_Stop
</UL>

<P><STRONG><a name="[bb]"></a>Box_Stay_Input</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, shoot.o(i.Box_Stay_Input))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Box_Stop_Ctrl
</UL>

<P><STRONG><a name="[b7]"></a>Box_Stay_Output</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, shoot.o(i.Box_Stay_Output))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Box_Stay_Output &rArr; PID_CAL
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_CAL
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Box_Stop_Ctrl
</UL>

<P><STRONG><a name="[b9]"></a>Box_Stop_Ctrl</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, shoot.o(i.Box_Stop_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Box_Stop_Ctrl &rArr; Box_Stay_Output &rArr; PID_CAL
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Shoot_Pid
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Box_Stay_Output
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Box_Stay_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shot_Stop
</UL>

<P><STRONG><a name="[21]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[bc]"></a>CAN1_Init</STRONG> (Thumb, 36 bytes, Stack size 48 bytes, can_drv.o(i.CAN1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CAN1_Init &rArr; HAL_CAN_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Start
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ConfigFilter
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ActivateNotification
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Filter_ParamsInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRIVER_Init
</UL>

<P><STRONG><a name="[3b]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CAN1_RX0_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo0MsgPendingCallback &rArr; CAN_Rx_Callback &rArr; CAN2_rxDataHandler &rArr; MOTOR_CAN2_RX
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[c2]"></a>CAN1_SendData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, can_drv.o(i.CAN1_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CAN1_SendData &rArr; CAN_SendData &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Offline_Sleep
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SendSingleData
</UL>

<P><STRONG><a name="[c4]"></a>CAN1_rxDataHandler</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, can_potocal.o(i.CAN1_rxDataHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CAN1_rxDataHandler &rArr; MOTOR_CAN1_RX
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTOR_CAN1_RX
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Rx_Callback
</UL>

<P><STRONG><a name="[c6]"></a>CAN2_Init</STRONG> (Thumb, 36 bytes, Stack size 48 bytes, can_drv.o(i.CAN2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CAN2_Init &rArr; HAL_CAN_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Start
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ConfigFilter
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ActivateNotification
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Filter_ParamsInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRIVER_Init
</UL>

<P><STRONG><a name="[67]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.CAN2_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CAN2_RX0_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo0MsgPendingCallback &rArr; CAN_Rx_Callback &rArr; CAN2_rxDataHandler &rArr; MOTOR_CAN2_RX
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[c7]"></a>CAN2_SendData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, can_drv.o(i.CAN2_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CAN2_SendData &rArr; CAN_SendData &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Offline_Sleep
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SendSingleData
</UL>

<P><STRONG><a name="[c8]"></a>CAN2_rxDataHandler</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, can_potocal.o(i.CAN2_rxDataHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CAN2_rxDataHandler &rArr; MOTOR_CAN2_RX
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_RX
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTOR_CAN2_RX
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Rx_Callback
</UL>

<P><STRONG><a name="[c3]"></a>CAN_SendData</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, can_drv.o(i.CAN_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CAN_SendData &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_AddTxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Current
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_SendData
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_SendData
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_send_0x2F
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_send_0x2E
</UL>

<P><STRONG><a name="[1c]"></a>CAN_SendSingleData</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, can_drv.o(i.CAN_SendSingleData))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CAN_SendSingleData &rArr; CAN2_SendData &rArr; CAN_SendData &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_SendData
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_SendData
</UL>
<BR>[Address Reference Count : 3]<UL><LI> chassis_motor.o(.data)
<LI> gimbal_motor.o(.data)
<LI> shoot_motor.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>CAN_rxDataHandler</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, cap_protocol.o(i.CAN_rxDataHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN_rxDataHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int16_to_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> super.o(.data)
</UL>
<P><STRONG><a name="[cf]"></a>CLIMB</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, chassis.o(i.CLIMB))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLIMB
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Half_Turn
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_Power_Transmit
</UL>

<P><STRONG><a name="[d1]"></a>COVER_SLEEP</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tim_drv.o(i.COVER_SLEEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = COVER_SLEEP &rArr; HAL_TIM_PWM_Stop &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shot_Stop
</UL>

<P><STRONG><a name="[d3]"></a>Chas_f_init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, state.o(i.Chas_f_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Chas_f_init &rArr; GIMBAL_YAW_INIT &rArr; Judge_Dir
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yaw_Turn_Err
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_YAW_INIT
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_PIT_NOW_SET
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_state_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_mode_init
</UL>

<P><STRONG><a name="[dc]"></a>Chassis_Motor_Power_Limit</STRONG> (Thumb, 174 bytes, Stack size 0 bytes, power_limit.o(i.Chassis_Motor_Power_Limit))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_Power_Output
</UL>

<P><STRONG><a name="[d8]"></a>Chassis_Motor_Stop</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, chassis.o(i.Chassis_Motor_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Chassis_Motor_Stop &rArr; Chassis_Power_Output &rArr; Chassis_Power_Transmit &rArr; CLIMB
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_Power_Output
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_Mode
</UL>

<P><STRONG><a name="[d9]"></a>Chassis_Power_Output</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, chassis.o(i.Chassis_Power_Output))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Chassis_Power_Output &rArr; Chassis_Power_Transmit &rArr; CLIMB
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Current
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Offline_Power_Limit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_Motor_Power_Limit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_FAST_CTRL
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_Power_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_Motor_Stop
</UL>

<P><STRONG><a name="[db]"></a>Chassis_Power_Transmit</STRONG> (Thumb, 342 bytes, Stack size 40 bytes, chassis.o(i.Chassis_Power_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Chassis_Power_Transmit &rArr; CLIMB
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLIMB
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_Power_Output
</UL>

<P><STRONG><a name="[2]"></a>Ctrl_mode_change</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, state.o(i.Ctrl_mode_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Ctrl_mode_change &rArr; Ctrl_mode_init &rArr; RC_init &rArr; Rc_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctrl_mode_init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctrl_mode_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> state.o(.data)
</UL>
<P><STRONG><a name="[e0]"></a>Ctrl_mode_handle</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, state.o(i.Ctrl_mode_handle))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctrl_mode_change
</UL>

<P><STRONG><a name="[df]"></a>Ctrl_mode_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, state.o(i.Ctrl_mode_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Ctrl_mode_init &rArr; RC_init &rArr; Rc_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctrl_mode_change
</UL>

<P><STRONG><a name="[185]"></a>Ctrl_state_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, state.o(i.Ctrl_state_init))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_init
</UL>

<P><STRONG><a name="[e3]"></a>DEVICE_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rp_init.o(i.DEVICE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DEVICE_Init &rArr; Init_Motor
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_vision
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Rc
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Motor
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Imu
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1db]"></a>DF_AUTO_SHOOT</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, auto.o(i.DF_AUTO_SHOOT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DF_AUTO_SHOOT
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_IRQ
</UL>

<P><STRONG><a name="[fe]"></a>DF_STATE</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, auto.o(i.DF_STATE))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_AUTO_Ctrl
</UL>

<P><STRONG><a name="[32]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA1_Stream0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream0_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA1_Stream1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream1_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA1_Stream2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream2_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA1_Stream3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream3_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA1_Stream5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream5_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA1_Stream7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream7_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA2_Stream2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream2_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA2_Stream7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream7_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[e9]"></a>DRIVER_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rp_init.o(i.DRIVER_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DRIVER_Init &rArr; CAN2_Init &rArr; HAL_CAN_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_Init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ef]"></a>DRV_UART_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart_drv.o(i.DRV_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DRV_UART_IRQHandler &rArr; uart_rx_idle_callback &rArr; USART5_rxDataHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_idle_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>

<P><STRONG><a name="[1bd]"></a>DeathZoom</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rp_math.o(i.DeathZoom))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_IsChannelReset
</UL>

<P><STRONG><a name="[24]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[23e]"></a>Determine_ID</STRONG> (Thumb, 258 bytes, Stack size 20 bytes, judge_infantrypotocol.o(i.Determine_ID))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Determine_ID
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_sensor_update
</UL>

<P><STRONG><a name="[18f]"></a>ENEMY</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, key.o(i.ENEMY))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOCK_FUNC
</UL>

<P><STRONG><a name="[165]"></a>Error_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_VISION_INIT
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART5_Init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DAC_Init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN2_Init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[f1]"></a>FRICTION_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, state.o(i.FRICTION_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FRICTION_init
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRIC_INIT
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_state_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_mode_init
</UL>

<P><STRONG><a name="[f2]"></a>FRIC_INIT</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, shoot.o(i.FRIC_INIT))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRICTION_init
</UL>

<P><STRONG><a name="[fc]"></a>Find_Tar</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, auto.o(i.Find_Tar))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHOT_AUTO_JUDGE
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_AUTO_Ctrl
</UL>

<P><STRONG><a name="[184]"></a>FirstGetInto_KEY_PRESS</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rc.o(i.FirstGetInto_KEY_PRESS))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_State_Judge
</UL>

<P><STRONG><a name="[f3]"></a>Friction_Close</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, shoot.o(i.Friction_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Friction_Close &rArr; Friction_Output &rArr; PID_CAL
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Friction_Output
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Friction_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shot_Stop
</UL>

<P><STRONG><a name="[f4]"></a>Friction_Input</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, shoot.o(i.Friction_Input))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Friction_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Friction_Close
</UL>

<P><STRONG><a name="[f5]"></a>Friction_Output</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, shoot.o(i.Friction_Output))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Friction_Output &rArr; PID_CAL
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_CAL
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Friction_Close
</UL>

<P><STRONG><a name="[4]"></a>Func_mode_change</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, state.o(i.Func_mode_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Func_mode_change &rArr; Func_mode_init &rArr; AUTO_SHOOT_init &rArr; SHOT_AUTO_INIT &rArr; TIM4_VISION_INIT &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_mode_init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_mode_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> state.o(.data)
</UL>
<P><STRONG><a name="[f7]"></a>Func_mode_handle</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, state.o(i.Func_mode_handle))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_mode_change
</UL>

<P><STRONG><a name="[f6]"></a>Func_mode_init</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, state.o(i.Func_mode_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Func_mode_init &rArr; AUTO_SHOOT_init &rArr; SHOT_AUTO_INIT &rArr; TIM4_VISION_INIT &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHOT_STAY_init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHOT_SINGLE_init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAGAZINE_init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_state_init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRICTION_init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_SHOOT_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_mode_change
</UL>

<P><STRONG><a name="[a0]"></a>Func_state_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, state.o(i.Func_state_init))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHOT_STAY_init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHOT_SINGLE_init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAGAZINE_init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_mode_init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRICTION_init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_SHOOT_init
</UL>

<P><STRONG><a name="[fb]"></a>GIMBAL_AUTO_Ctrl</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, gimbal.o(i.GIMBAL_AUTO_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GIMBAL_AUTO_Ctrl &rArr; GIMBAL_GIMB_FRI_CTRL &rArr; YAW_IMU_CTRL &rArr; Gimbal_Yaw_IMU_Output &rArr; PID_CAL
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_INIT_NOW
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZM_STATE
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Tar
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DF_STATE
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_GIMB_FRI_CTRL
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_AUTO_FRI_CTRL
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VISION_TEST
</UL>

<P><STRONG><a name="[ff]"></a>GIMBAL_AUTO_FRI_CTRL</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gimbal.o(i.GIMBAL_AUTO_FRI_CTRL))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GIMBAL_AUTO_FRI_CTRL &rArr; YAW_AUTO_CTRL &rArr; Gimbal_Yaw_Auto_Output &rArr; PID_CAL
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YAW_AUTO_CTRL
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_AUTO_CTRL
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_AUTO_Ctrl
</UL>

<P><STRONG><a name="[104]"></a>GIMBAL_CHAS_FRI_CTRL</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gimbal.o(i.GIMBAL_CHAS_FRI_CTRL))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GIMBAL_CHAS_FRI_CTRL &rArr; PIT_MEC_CTRL &rArr; Gimbal_Pitch_MEC_Output &rArr; PID_CAL
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YAW_MEC_CTRL
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_MEC_CTRL
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_INIT_CTRL
</UL>

<P><STRONG><a name="[101]"></a>GIMBAL_GIMB_FRI_CTRL</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gimbal.o(i.GIMBAL_GIMB_FRI_CTRL))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GIMBAL_GIMB_FRI_CTRL &rArr; YAW_IMU_CTRL &rArr; Gimbal_Yaw_IMU_Output &rArr; PID_CAL
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YAW_IMU_CTRL
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_IMU_CTRL
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_AUTO_Ctrl
</UL>

<P><STRONG><a name="[109]"></a>GIMBAL_INIT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gimbal.o(i.GIMBAL_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GIMBAL_INIT &rArr; GIMBAL_YAW_INIT &rArr; Judge_Dir
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_YAW_INIT
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_PIT_INIT
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_INIT_CTRL
</UL>

<P><STRONG><a name="[10b]"></a>GIMBAL_INIT_CTRL</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, gimbal.o(i.GIMBAL_INIT_CTRL))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GIMBAL_INIT_CTRL &rArr; GIMBAL_CHAS_FRI_CTRL &rArr; PIT_MEC_CTRL &rArr; Gimbal_Pitch_MEC_Output &rArr; PID_CAL
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_INIT
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_INIT_NOW
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yaw_Mec_Err
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pit_Mec_Err
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_CHAS_FRI_CTRL
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VISION_TEST
</UL>

<P><STRONG><a name="[100]"></a>GIMBAL_INIT_NOW</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gimbal.o(i.GIMBAL_INIT_NOW))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GIMBAL_INIT_NOW &rArr; GIMBAL_YAW_INIT &rArr; Judge_Dir
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_YAW_INIT
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_PIT_NOW_SET
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHOT_AUTO_INIT
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Top_f_init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimb_f_init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_INIT_CTRL
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_AUTO_Ctrl
</UL>

<P><STRONG><a name="[10a]"></a>GIMBAL_PIT_INIT</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gimbal.o(i.GIMBAL_PIT_INIT))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_INIT
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAGAZINE_init
</UL>

<P><STRONG><a name="[d5]"></a>GIMBAL_PIT_NOW_SET</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gimbal.o(i.GIMBAL_PIT_NOW_SET))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_INIT_NOW
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chas_f_init
</UL>

<P><STRONG><a name="[d6]"></a>GIMBAL_YAW_INIT</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gimbal.o(i.GIMBAL_YAW_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GIMBAL_YAW_INIT &rArr; Judge_Dir
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Dir
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_INIT
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_INIT_NOW
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chas_f_init
</UL>

<P><STRONG><a name="[1d8]"></a>Get_CRC16_Check_Sum</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, crc.o(i.Get_CRC16_Check_Sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_CRC16_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_CRC16_Check_Sum
</UL>

<P><STRONG><a name="[1da]"></a>Get_CRC8_Check_Sum</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, crc.o(i.Get_CRC8_Check_Sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_CRC8_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_CRC8_Check_Sum
</UL>

<P><STRONG><a name="[ba]"></a>Get_Shoot_Pid</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, shoot.o(i.Get_Shoot_Pid))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Box_Stop_Ctrl
</UL>

<P><STRONG><a name="[1ba]"></a>Gimb_Pit_AUTO_Input</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gimbal.o(i.Gimb_Pit_AUTO_Input))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_AUTO_CTRL
</UL>

<P><STRONG><a name="[1bb]"></a>Gimb_Pit_Input</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, gimbal.o(i.Gimb_Pit_Input))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_MEC_CTRL
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_IMU_CTRL
</UL>

<P><STRONG><a name="[1dc]"></a>Gimb_Yaw_AUTO_Input</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gimbal.o(i.Gimb_Yaw_AUTO_Input))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YAW_AUTO_CTRL
</UL>

<P><STRONG><a name="[1dd]"></a>Gimb_Yaw_Input</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, gimbal.o(i.Gimb_Yaw_Input))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YAW_IMU_CTRL
</UL>

<P><STRONG><a name="[10f]"></a>Gimb_f_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, state.o(i.Gimb_f_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Gimb_f_init &rArr; GIMBAL_INIT_NOW &rArr; GIMBAL_YAW_INIT &rArr; Judge_Dir
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_INIT_NOW
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_state_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_mode_init
</UL>

<P><STRONG><a name="[111]"></a>Gimbal_Motor_Current</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gimbal.o(i.Gimbal_Motor_Current))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_Yaw_MEC_Output
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_Yaw_IMU_Output
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_Yaw_Auto_Output
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_Pitch_MEC_Output
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_Pitch_IMU_Output
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_Pitch_Auto_Output
</UL>

<P><STRONG><a name="[110]"></a>Gimbal_Pitch_Auto_Output</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, gimbal.o(i.Gimbal_Pitch_Auto_Output))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Gimbal_Pitch_Auto_Output &rArr; PID_CAL
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_CAL
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_Motor_Current
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_AUTO_CTRL
</UL>

<P><STRONG><a name="[112]"></a>Gimbal_Pitch_IMU_Output</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, gimbal.o(i.Gimbal_Pitch_IMU_Output))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Gimbal_Pitch_IMU_Output &rArr; PID_CAL
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_CAL
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limit_Target
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_Motor_Current
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_IMU_CTRL
</UL>

<P><STRONG><a name="[114]"></a>Gimbal_Pitch_MEC_Output</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, gimbal.o(i.Gimbal_Pitch_MEC_Output))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Gimbal_Pitch_MEC_Output &rArr; PID_CAL
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_CAL
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limit_Target
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_Motor_Current
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_MEC_CTRL
</UL>

<P><STRONG><a name="[115]"></a>Gimbal_Yaw_Auto_Output</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gimbal.o(i.Gimbal_Yaw_Auto_Output))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Gimbal_Yaw_Auto_Output &rArr; PID_CAL
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_CAL
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_Motor_Current
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YAW_AUTO_CTRL
</UL>

<P><STRONG><a name="[116]"></a>Gimbal_Yaw_IMU_Output</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, gimbal.o(i.Gimbal_Yaw_IMU_Output))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Gimbal_Yaw_IMU_Output &rArr; PID_CAL
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_CAL
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limit_Target
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_Motor_Current
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YAW_IMU_CTRL
</UL>

<P><STRONG><a name="[117]"></a>Gimbal_Yaw_MEC_Output</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gimbal.o(i.Gimbal_Yaw_MEC_Output))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Gimbal_Yaw_MEC_Output &rArr; PID_CAL
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_CAL
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_Motor_Current
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YAW_MEC_CTRL
</UL>

<P><STRONG><a name="[194]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[118]"></a>HAL_ADC_Init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[119]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, adc.o(i.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[bf]"></a>HAL_CAN_ActivateNotification</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_ActivateNotification))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Init
</UL>

<P><STRONG><a name="[cd]"></a>HAL_CAN_AddTxMessage</STRONG> (Thumb, 200 bytes, Stack size 20 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_AddTxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_CAN_AddTxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SendData
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HXZP_Tx_uint8
</UL>

<P><STRONG><a name="[be]"></a>HAL_CAN_ConfigFilter</STRONG> (Thumb, 262 bytes, Stack size 8 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_ConfigFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_CAN_ConfigFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Init
</UL>

<P><STRONG><a name="[129]"></a>HAL_CAN_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[cc]"></a>HAL_CAN_GetRxMessage</STRONG> (Thumb, 232 bytes, Stack size 12 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_GetRxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_CAN_GetRxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Rx_Callback
</UL>

<P><STRONG><a name="[c1]"></a>HAL_CAN_IRQHandler</STRONG> (Thumb, 508 bytes, Stack size 40 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_CAN_IRQHandler &rArr; HAL_CAN_RxFifo0MsgPendingCallback &rArr; CAN_Rx_Callback &rArr; CAN2_rxDataHandler &rArr; MOTOR_CAN2_RX
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_WakeUpFromRxMsgCallback
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox2CompleteCallback
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox2AbortCallback
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox1CompleteCallback
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox1AbortCallback
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox0CompleteCallback
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxMailbox0AbortCallback
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_SleepCallback
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo1MsgPendingCallback
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo1FullCallback
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0FullCallback
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[12a]"></a>HAL_CAN_Init</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN2_Init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
</UL>

<P><STRONG><a name="[12b]"></a>HAL_CAN_MspInit</STRONG> (Thumb, 226 bytes, Stack size 48 bytes, can.o(i.HAL_CAN_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_CAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
</UL>

<P><STRONG><a name="[123]"></a>HAL_CAN_RxFifo0FullCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_RxFifo0FullCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[124]"></a>HAL_CAN_RxFifo0MsgPendingCallback</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, can_drv.o(i.HAL_CAN_RxFifo0MsgPendingCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_CAN_RxFifo0MsgPendingCallback &rArr; CAN_Rx_Callback &rArr; CAN2_rxDataHandler &rArr; MOTOR_CAN2_RX
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Rx_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[125]"></a>HAL_CAN_RxFifo1FullCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_RxFifo1FullCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[126]"></a>HAL_CAN_RxFifo1MsgPendingCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_RxFifo1MsgPendingCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[127]"></a>HAL_CAN_SleepCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_SleepCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[c0]"></a>HAL_CAN_Start</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CAN_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Init
</UL>

<P><STRONG><a name="[11e]"></a>HAL_CAN_TxMailbox0AbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox0AbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[11d]"></a>HAL_CAN_TxMailbox0CompleteCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox0CompleteCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[120]"></a>HAL_CAN_TxMailbox1AbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox1AbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[11f]"></a>HAL_CAN_TxMailbox1CompleteCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox1CompleteCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[122]"></a>HAL_CAN_TxMailbox2AbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox2AbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[121]"></a>HAL_CAN_TxMailbox2CompleteCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxMailbox2CompleteCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[128]"></a>HAL_CAN_WakeUpFromRxMsgCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_WakeUpFromRxMsgCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[198]"></a>HAL_DAC_ConfigChannel</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f4xx_hal_dac.o(i.HAL_DAC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DAC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DAC_Init
</UL>

<P><STRONG><a name="[12e]"></a>HAL_DAC_Init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32f4xx_hal_dac.o(i.HAL_DAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_DAC_Init &rArr; HAL_DAC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DAC_Init
</UL>

<P><STRONG><a name="[12f]"></a>HAL_DAC_MspInit</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, dac.o(i.HAL_DAC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_DAC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_Init
</UL>

<P><STRONG><a name="[130]"></a>HAL_DMA_Abort</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[15e]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[e8]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 412 bytes, Stack size 32 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream7_IRQHandler
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream2_IRQHandler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream7_IRQHandler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream5_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream2_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream1_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream0_IRQHandler
</UL>

<P><STRONG><a name="[131]"></a>HAL_DMA_Init</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_Init &rArr; DMA_CheckFifoParam
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[11c]"></a>HAL_GPIO_Init</STRONG> (Thumb, 448 bytes, Stack size 40 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_MspInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[18b]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_CTRL
</UL>

<P><STRONG><a name="[19e]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[b6]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_V
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_R
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_B
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Barrel_Change_Key
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_S1_CTRL
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_shot_time
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Offline_Sleep
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_INIT_CTRL
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_sensor_init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Start
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[134]"></a>HAL_IWDG_Init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f4xx_hal_iwdg.o(i.HAL_IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
</UL>

<P><STRONG><a name="[1cc]"></a>HAL_IWDG_Refresh</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_iwdg.o(i.HAL_IWDG_Refresh))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_led
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15a]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[135]"></a>HAL_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[137]"></a>HAL_InitTick</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, stm32f4xx_hal_timebase_tim.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[138]"></a>HAL_MspInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[12d]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[12c]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[136]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[13e]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[139]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[13a]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1d2]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[13f]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[140]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 856 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[14d]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[14f]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1a2]"></a>HAL_TIMEx_ConfigBreakDeadTime</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_ConfigBreakDeadTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIMEx_ConfigBreakDeadTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[1a1]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_VISION_INIT
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[13b]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_VISION_INIT
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[141]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[13c]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_VISION_INIT
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[143]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_ETR_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_VISION_INIT
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[149]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[148]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 358 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[150]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, tim.o(i.HAL_TIM_MspPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[14a]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[151]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC2_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[156]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_PWM_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[157]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[14b]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[158]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>

<P><STRONG><a name="[d2]"></a>HAL_TIM_PWM_Stop</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_TIM_PWM_Stop &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COVER_SLEEP
</UL>

<P><STRONG><a name="[14c]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[14e]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[160]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UARTEx_RxEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[15f]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[15b]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 522 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[162]"></a>HAL_UART_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART5_Init
</UL>

<P><STRONG><a name="[163]"></a>HAL_UART_MspInit</STRONG> (Thumb, 976 bytes, Stack size 64 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1d1]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[161]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[166]"></a>HXZP_Tx_uint8</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, can_drv.o(i.HXZP_Tx_uint8))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HXZP_Tx_uint8 &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_AddTxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Send
</UL>

<P><STRONG><a name="[d0]"></a>Half_Turn</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, s_function.o(i.Half_Turn))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_CAL
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yaw_Turn_Err
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLIMB
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yaw_Mec_Err
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pit_Mec_Err
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_sensor_update
</UL>

<P><STRONG><a name="[1f]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[168]"></a>IIC_Ack</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, soft_iic.o(i.IIC_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IIC_Ack &rArr; delay_us &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[16a]"></a>IIC_NAck</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, soft_iic.o(i.IIC_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IIC_NAck &rArr; delay_us &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[16b]"></a>IIC_Read_Byte</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, soft_iic.o(i.IIC_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_us &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_all
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
</UL>

<P><STRONG><a name="[16c]"></a>IIC_Send_Byte</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, soft_iic.o(i.IIC_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IIC_Send_Byte &rArr; delay_us &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_all
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_i2c_reg_write
</UL>

<P><STRONG><a name="[16d]"></a>IIC_Start</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, soft_iic.o(i.IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IIC_Start &rArr; delay_us &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_all
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_i2c_reg_write
</UL>

<P><STRONG><a name="[16e]"></a>IIC_Stop</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, soft_iic.o(i.IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IIC_Stop &rArr; delay_us &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_all
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_i2c_reg_write
</UL>

<P><STRONG><a name="[16f]"></a>IIC_Wait_Ack</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, soft_iic.o(i.IIC_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_us &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_all
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_i2c_reg_write
</UL>

<P><STRONG><a name="[e4]"></a>Init_Imu</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, imu.o(i.Init_Imu))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEVICE_Init
</UL>

<P><STRONG><a name="[e6]"></a>Init_Motor</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, motor.o(i.Init_Motor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Init_Motor
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEVICE_Init
</UL>

<P><STRONG><a name="[e5]"></a>Init_Rc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rc.o(i.Init_Rc))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEVICE_Init
</UL>

<P><STRONG><a name="[e7]"></a>Init_vision</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, vision_potocol.o(i.Init_vision))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEVICE_Init
</UL>

<P><STRONG><a name="[23a]"></a>JUDGE_NULL</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, s_function.o(i.JUDGE_NULL))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_sensor_update
</UL>

<P><STRONG><a name="[10e]"></a>Judge_Dir</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, s_function.o(i.Judge_Dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Judge_Dir
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limit_Target
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_V
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_YAW_INIT
</UL>

<P><STRONG><a name="[dd]"></a>Judge_Offline_Power_Limit</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, power_limit.o(i.Judge_Offline_Power_Limit))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_Power_Output
</UL>

<P><STRONG><a name="[170]"></a>KB_CTRL</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, key.o(i.KB_CTRL))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = KB_CTRL &rArr; Key_V &rArr; KEY_State_Judge
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Channel_Update
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shot_Reset
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Reset
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_ctrl
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Z
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_X
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_V
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_SHIFT
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_R
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Q
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Mouse_R
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Mouse_L
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_G
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_F
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_E
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_C
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_B
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Barrel_Change_Key
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Shoot_Ctrl
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOCK_CTRL
</UL>

<P><STRONG><a name="[183]"></a>KEY_State_Judge</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, rc.o(i.KEY_State_Judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = KEY_State_Judge
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirstGetInto_KEY_PRESS
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_ctrl
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Z
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_X
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_V
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_SHIFT
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_R
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Q
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Mouse_R
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Mouse_L
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_G
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_F
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_E
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_C
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_B
</UL>

<P><STRONG><a name="[e2]"></a>KEY_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, state.o(i.KEY_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = KEY_init &rArr; Key_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_INIT
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctrl_state_init
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctrl_mode_init
</UL>

<P><STRONG><a name="[175]"></a>Key_B</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, key.o(i.Key_B))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Key_B &rArr; KEY_State_Judge
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_State_Judge
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KB_CTRL
</UL>

<P><STRONG><a name="[174]"></a>Key_C</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, key.o(i.Key_C))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Key_C &rArr; KEY_State_Judge
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limit_Target
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_State_Judge
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KB_CTRL
</UL>

<P><STRONG><a name="[171]"></a>Key_Channel_Update</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, rc.o(i.Key_Channel_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Key_Channel_Update
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS_Channel
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sim_Channel
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_Channel
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KB_CTRL
</UL>

<P><STRONG><a name="[173]"></a>Key_E</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, key.o(i.Key_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Key_E &rArr; KEY_State_Judge
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limit_Target
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_State_Judge
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KB_CTRL
</UL>

<P><STRONG><a name="[177]"></a>Key_F</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, key.o(i.Key_F))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Key_F &rArr; KEY_State_Judge
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_State_Judge
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KB_CTRL
</UL>

<P><STRONG><a name="[17b]"></a>Key_G</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, key.o(i.Key_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Key_G &rArr; KEY_State_Judge
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_State_Judge
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KB_CTRL
</UL>

<P><STRONG><a name="[186]"></a>Key_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, rc.o(i.Key_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Key_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_init
</UL>

<P><STRONG><a name="[17e]"></a>Key_Mouse_L</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, key.o(i.Key_Mouse_L))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Key_Mouse_L &rArr; KEY_State_Judge
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_State_Judge
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KB_CTRL
</UL>

<P><STRONG><a name="[17f]"></a>Key_Mouse_R</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, key.o(i.Key_Mouse_R))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Key_Mouse_R &rArr; KEY_State_Judge
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_State_Judge
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KB_CTRL
</UL>

<P><STRONG><a name="[172]"></a>Key_Q</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, key.o(i.Key_Q))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Key_Q &rArr; KEY_State_Judge
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limit_Target
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_State_Judge
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KB_CTRL
</UL>

<P><STRONG><a name="[178]"></a>Key_R</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, key.o(i.Key_R))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Key_R &rArr; KEY_State_Judge
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_State_Judge
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KB_CTRL
</UL>

<P><STRONG><a name="[17d]"></a>Key_SHIFT</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, key.o(i.Key_SHIFT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Key_SHIFT &rArr; KEY_State_Judge
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_State_Judge
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KB_CTRL
</UL>

<P><STRONG><a name="[176]"></a>Key_V</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, key.o(i.Key_V))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Key_V &rArr; KEY_State_Judge
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_State_Judge
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Dir
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KB_CTRL
</UL>

<P><STRONG><a name="[17a]"></a>Key_X</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, key.o(i.Key_X))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Key_X &rArr; KEY_State_Judge
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_State_Judge
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KB_CTRL
</UL>

<P><STRONG><a name="[179]"></a>Key_Z</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, key.o(i.Key_Z))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Key_Z &rArr; KEY_State_Judge
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_State_Judge
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KB_CTRL
</UL>

<P><STRONG><a name="[17c]"></a>Key_ctrl</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, key.o(i.Key_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Key_ctrl &rArr; KEY_State_Judge
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_State_Judge
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KB_CTRL
</UL>

<P><STRONG><a name="[18a]"></a>LED_CTRL</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, led_task.o(i.LED_CTRL))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LED_CTRL
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_led
</UL>

<P><STRONG><a name="[18c]"></a>LOCK_CTRL</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, state.o(i.LOCK_CTRL))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LOCK_CTRL &rArr; KB_CTRL &rArr; Key_V &rArr; KEY_State_Judge
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_S1_CTRL
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KB_CTRL
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_CENTER
</UL>

<P><STRONG><a name="[18e]"></a>LOCK_FUNC</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, state.o(i.LOCK_FUNC))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LOCK_FUNC &rArr; RC_S2_CTRL
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_S2_CTRL
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENEMY
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_CENTER
</UL>

<P><STRONG><a name="[191]"></a>LOCK_OPEN</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, state.o(i.LOCK_OPEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LOCK_OPEN
</UL>
<BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_INIT
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_CENTER
</UL>

<P><STRONG><a name="[113]"></a>Limit_Target</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, s_function.o(i.Limit_Target))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Dir
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Q
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_E
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_C
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_Yaw_IMU_Output
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_Pitch_MEC_Output
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_Pitch_IMU_Output
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MID_RESET
</UL>

<P><STRONG><a name="[fa]"></a>MAGAZINE_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, state.o(i.MAGAZINE_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MAGAZINE_init
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_PIT_INIT
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_state_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_mode_init
</UL>

<P><STRONG><a name="[192]"></a>MID_RESET</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, s_function.o(i.MID_RESET))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MID_RESET
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limit_Target
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_update
</UL>

<P><STRONG><a name="[c5]"></a>MOTOR_CAN1_RX</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, motor.o(i.MOTOR_CAN1_RX))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MOTOR_CAN1_RX
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_rxDataHandler
</UL>

<P><STRONG><a name="[ca]"></a>MOTOR_CAN2_RX</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, motor.o(i.MOTOR_CAN2_RX))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MOTOR_CAN2_RX
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_rxDataHandler
</UL>

<P><STRONG><a name="[ab]"></a>MPU_Read_Byte</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, bmi2_common.o(i.MPU_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MPU_Read_Byte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_us &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Get_GRO
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_i2c_reg_read
</UL>

<P><STRONG><a name="[ad]"></a>MPU_Read_all</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, bmi2_common.o(i.MPU_Read_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MPU_Read_all &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_us &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Get_RawData
</UL>

<P><STRONG><a name="[193]"></a>MX_ADC1_Init</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, adc.o(i.MX_ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_ADC1_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[195]"></a>MX_CAN1_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, can.o(i.MX_CAN1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_CAN1_Init &rArr; HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[196]"></a>MX_CAN2_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, can.o(i.MX_CAN2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_CAN2_Init &rArr; HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[197]"></a>MX_DAC_Init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, dac.o(i.MX_DAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_DAC_Init &rArr; HAL_DAC_Init &rArr; HAL_DAC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_Init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[199]"></a>MX_DMA_Init</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, dma.o(i.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19a]"></a>MX_FREERTOS_Init</STRONG> (Thumb, 96 bytes, Stack size 120 bytes, freertos.o(i.MX_FREERTOS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = MX_FREERTOS_Init &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19d]"></a>MX_GPIO_Init</STRONG> (Thumb, 246 bytes, Stack size 56 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19f]"></a>MX_IWDG_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, iwdg.o(i.MX_IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_IWDG_Init &rArr; HAL_IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a0]"></a>MX_TIM1_Init</STRONG> (Thumb, 210 bytes, Stack size 96 bytes, tim.o(i.MX_TIM1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MX_TIM1_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_ConfigBreakDeadTime
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a3]"></a>MX_TIM4_Init</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, tim.o(i.MX_TIM4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MX_TIM4_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a4]"></a>MX_UART5_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart.o(i.MX_UART5_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_UART5_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a5]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a6]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usart.o(i.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a7]"></a>MX_USART3_UART_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart.o(i.MX_USART3_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_USART3_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1a8]"></a>Mouse_Updata</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rc.o(i.Mouse_Updata))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Mouse_Updata &rArr; Mouse_Y_Speed
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mouse_Z_Speed
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mouse_Y_Speed
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mouse_X_Speed
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_sensor_update
</UL>

<P><STRONG><a name="[1a9]"></a>Mouse_X_Speed</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, rc.o(i.Mouse_X_Speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Mouse_X_Speed
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mouse_Updata
</UL>

<P><STRONG><a name="[1aa]"></a>Mouse_Y_Speed</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, rc.o(i.Mouse_Y_Speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Mouse_Y_Speed
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mouse_Updata
</UL>

<P><STRONG><a name="[1ab]"></a>Mouse_Z_Speed</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, rc.o(i.Mouse_Z_Speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Mouse_Z_Speed
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mouse_Updata
</UL>

<P><STRONG><a name="[181]"></a>Move_Reset</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, key.o(i.Move_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KB_CTRL
</UL>

<P><STRONG><a name="[3]"></a>Move_mode_change</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, state.o(i.Move_mode_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Move_mode_change &rArr; Move_mode_init &rArr; Top_f_init &rArr; GIMBAL_INIT_NOW &rArr; GIMBAL_YAW_INIT &rArr; Judge_Dir
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_mode_init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_mode_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> state.o(.data)
</UL>
<P><STRONG><a name="[1ae]"></a>Move_mode_handle</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, state.o(i.Move_mode_handle))
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOP_FIRST_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_mode_change
</UL>

<P><STRONG><a name="[1ad]"></a>Move_mode_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, state.o(i.Move_mode_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Move_mode_init &rArr; Top_f_init &rArr; GIMBAL_INIT_NOW &rArr; GIMBAL_YAW_INIT &rArr; Judge_Dir
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Top_f_init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimb_f_init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chas_f_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_mode_change
</UL>

<P><STRONG><a name="[d4]"></a>Move_state_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, state.o(i.Move_state_init))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Top_f_init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimb_f_init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chas_f_init
</UL>

<P><STRONG><a name="[1e]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1b1]"></a>OFFLINE_CHECK_TASK</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, offline_check.o(i.OFFLINE_CHECK_TASK))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = OFFLINE_CHECK_TASK &rArr; RC_Offline_Sleep &rArr; Sleep_Mode &rArr; Chassis_Motor_Stop &rArr; Chassis_Power_Output &rArr; Chassis_Power_Transmit &rArr; CLIMB
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_heart_beat
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_offline_check
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_offline_check
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_offline_check
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_ResetData
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Offline_Sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_normal_task
</UL>

<P><STRONG><a name="[b8]"></a>PID_CAL</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, s_function.o(i.PID_CAL))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PID_CAL
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_calculation
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Half_Turn
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_pid_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_chassis_task
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Friction_Output
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Box_Stay_Output
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_FAST_CTRL
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_Yaw_MEC_Output
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_Yaw_IMU_Output
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_Yaw_Auto_Output
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_Pitch_MEC_Output
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_Pitch_IMU_Output
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_Pitch_Auto_Output
</UL>

<P><STRONG><a name="[103]"></a>PIT_AUTO_CTRL</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gimbal.o(i.PIT_AUTO_CTRL))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PIT_AUTO_CTRL &rArr; Gimbal_Pitch_Auto_Output &rArr; PID_CAL
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_Pitch_Auto_Output
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimb_Pit_AUTO_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_AUTO_FRI_CTRL
</UL>

<P><STRONG><a name="[108]"></a>PIT_IMU_CTRL</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gimbal.o(i.PIT_IMU_CTRL))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PIT_IMU_CTRL &rArr; Gimbal_Pitch_IMU_Output &rArr; PID_CAL
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_Pitch_IMU_Output
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimb_Pit_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_GIMB_FRI_CTRL
</UL>

<P><STRONG><a name="[106]"></a>PIT_MEC_CTRL</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gimbal.o(i.PIT_MEC_CTRL))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PIT_MEC_CTRL &rArr; Gimbal_Pitch_MEC_Output &rArr; PID_CAL
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_Pitch_MEC_Output
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimb_Pit_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_CHAS_FRI_CTRL
</UL>

<P><STRONG><a name="[da]"></a>POWER_FAST_CTRL</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, chassis.o(i.POWER_FAST_CTRL))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = POWER_FAST_CTRL &rArr; PID_CAL
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_CAL
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_Power_Output
</UL>

<P><STRONG><a name="[eb]"></a>PWM_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tim_drv.o(i.PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PWM_Init &rArr; HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRIVER_Init
</UL>

<P><STRONG><a name="[10d]"></a>Pit_Mec_Err</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gimbal.o(i.Pit_Mec_Err))
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Half_Turn
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_INIT_CTRL
</UL>

<P><STRONG><a name="[1bc]"></a>RC_IsChannelReset</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, rc.o(i.RC_IsChannelReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RC_IsChannelReset
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeathZoom
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_sensor_update
</UL>

<P><STRONG><a name="[1b2]"></a>RC_Offline_Sleep</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, offline_check.o(i.RC_Offline_Sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RC_Offline_Sleep &rArr; Sleep_Mode &rArr; Chassis_Motor_Stop &rArr; Chassis_Power_Output &rArr; Chassis_Power_Transmit &rArr; CLIMB
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_SendData
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_SendData
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_Mode
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OFFLINE_CHECK_TASK
</UL>

<P><STRONG><a name="[1b4]"></a>RC_ResetData</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, rc.o(i.RC_ResetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RC_ResetData
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OFFLINE_CHECK_TASK
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_sensor_init
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_sensor_heart_beat
</UL>

<P><STRONG><a name="[18d]"></a>RC_S1_CTRL</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, key.o(i.RC_S1_CTRL))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RC_S1_CTRL
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOCK_CTRL
</UL>

<P><STRONG><a name="[190]"></a>RC_S2_CTRL</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, key.o(i.RC_S2_CTRL))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RC_S2_CTRL
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOCK_FUNC
</UL>

<P><STRONG><a name="[e1]"></a>RC_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, state.o(i.RC_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RC_init &rArr; Rc_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_INIT
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc_Init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctrl_state_init
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctrl_mode_init
</UL>

<P><STRONG><a name="[1d6]"></a>Rc_Data</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rc.o(i.Rc_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Rc_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_rxDataHandler
</UL>

<P><STRONG><a name="[1bf]"></a>Rc_Init</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, rc.o(i.Rc_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Rc_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_init
</UL>

<P><STRONG><a name="[1ac]"></a>SF</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, s_function.o(i.SF))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mouse_Z_Speed
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mouse_Y_Speed
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mouse_X_Speed
</UL>

<P><STRONG><a name="[a1]"></a>SHOT_AUTO_INIT</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, auto.o(i.SHOT_AUTO_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SHOT_AUTO_INIT &rArr; TIM4_VISION_INIT &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_INIT_NOW
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_VISION_INIT
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_SHOOT_init
</UL>

<P><STRONG><a name="[9d]"></a>SHOT_AUTO_JUDGE</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, auto.o(i.SHOT_AUTO_JUDGE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SHOT_AUTO_JUDGE
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Tar
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_SHOOT_CTRL
</UL>

<P><STRONG><a name="[1c1]"></a>SHOT_INIT</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, shoot.o(i.SHOT_INIT))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHOT_SINGLE_init
</UL>

<P><STRONG><a name="[f8]"></a>SHOT_SINGLE_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, state.o(i.SHOT_SINGLE_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SHOT_SINGLE_init &rArr; res_shot_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHOT_INIT
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_shot_time
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_state_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_mode_init
</UL>

<P><STRONG><a name="[f9]"></a>SHOT_STAY_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, state.o(i.SHOT_STAY_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SHOT_STAY_init &rArr; res_shot_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;res_shot_time
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_state_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_mode_init
</UL>

<P><STRONG><a name="[1c3]"></a>STATE_CENTER</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, state.o(i.STATE_CENTER))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = STATE_CENTER &rArr; VISION_TEST &rArr; GIMBAL_INIT_CTRL &rArr; GIMBAL_CHAS_FRI_CTRL &rArr; PIT_MEC_CTRL &rArr; Gimbal_Pitch_MEC_Output &rArr; PID_CAL
</UL>
<BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_INIT
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VISION_TEST
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VISION_TEST_OPEN
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOCK_OPEN
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOCK_FUNC
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOCK_CTRL
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_normal_task
</UL>

<P><STRONG><a name="[1]"></a>STATE_INIT</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, state.o(i.STATE_INIT))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_CENTER
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_normal_task
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOCK_OPEN
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> state.o(.data)
</UL>
<P><STRONG><a name="[de]"></a>Send_Current</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, motor.o(i.Send_Current))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Send_Current &rArr; CAN_SendData &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_chassis_task
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shot_Stop
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VISION_TEST
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_Power_Output
</UL>

<P><STRONG><a name="[b4]"></a>Set_accel</STRONG> (Thumb, 84 bytes, Stack size 72 bytes, bmi.o(i.Set_accel))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = Set_accel &rArr; bmi2_get_sensor_config &rArr; get_step_count_params_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_map_data_int
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_error_codes_print_result
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Init
</UL>

<P><STRONG><a name="[b3]"></a>Set_gyro</STRONG> (Thumb, 88 bytes, Stack size 72 bytes, bmi.o(i.Set_gyro))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = Set_gyro &rArr; bmi2_get_sensor_config &rArr; get_step_count_params_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_map_data_int
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_error_codes_print_result
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Init
</UL>

<P><STRONG><a name="[180]"></a>Shot_Reset</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, key.o(i.Shot_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Shot_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KB_CTRL
</UL>

<P><STRONG><a name="[1c9]"></a>Shot_Stop</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, shoot.o(i.Shot_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Shot_Stop &rArr; Send_Current &rArr; CAN_SendData &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Current
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COVER_SLEEP
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Friction_Close
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Box_Stop_Ctrl
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Barrel_Unload
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sleep_Mode
</UL>

<P><STRONG><a name="[187]"></a>Sim_Channel</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, rc.o(i.Sim_Channel))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Channel_Update
</UL>

<P><STRONG><a name="[1be]"></a>Sleep_Mode</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, offline_check.o(i.Sleep_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Sleep_Mode &rArr; Chassis_Motor_Stop &rArr; Chassis_Power_Output &rArr; Chassis_Power_Transmit &rArr; CLIMB
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shot_Stop
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_Motor_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Offline_Sleep
</UL>

<P><STRONG><a name="[83]"></a>StartDefaultTask</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, freertos.o(i.StartDefaultTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = StartDefaultTask &rArr;  StartDefaultTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>Start_chassis_task</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, chassis_task.o(i.Start_chassis_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Start_chassis_task &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Current
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_CAL
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>Start_led</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, led_task.o(i.Start_led))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Start_led &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Refresh
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_CTRL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>Start_normal_task</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, normal_task.o(i.Start_normal_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Start_normal_task &rArr; STATE_CENTER &rArr; VISION_TEST &rArr; GIMBAL_INIT_CTRL &rArr; GIMBAL_CHAS_FRI_CTRL &rArr; PIT_MEC_CTRL &rArr; Gimbal_Pitch_MEC_Output &rArr; PID_CAL
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_Send
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_INIT
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_CENTER
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OFFLINE_CHECK_TASK
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[26]"></a>SysTick_Handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1cf]"></a>SystemClock_Config</STRONG> (Thumb, 148 bytes, Stack size 88 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[79]"></a>SystemInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[43]"></a>TIM2_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM2_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM4_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM4_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_IRQ
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1c0]"></a>TIM4_VISION_INIT</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, auto.o(i.TIM4_VISION_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TIM4_VISION_INIT &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHOT_AUTO_INIT
</UL>

<P><STRONG><a name="[142]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 156 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[159]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
</UL>

<P><STRONG><a name="[144]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[153]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[1af]"></a>TOP_FIRST_ctrl</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, state.o(i.TOP_FIRST_ctrl))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_mode_handle
</UL>

<P><STRONG><a name="[1b0]"></a>Top_f_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, state.o(i.Top_f_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Top_f_init &rArr; GIMBAL_INIT_NOW &rArr; GIMBAL_YAW_INIT &rArr; Judge_Dir
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_INIT_NOW
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_state_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_mode_init
</UL>

<P><STRONG><a name="[5b]"></a>UART4_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART4_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>UART5_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART5_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>USART1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[ee]"></a>USART1_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, uart_drv.o(i.USART1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_Init &rArr; DMA_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRIVER_Init
</UL>

<P><STRONG><a name="[276]"></a>USART1_rxDataHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usart_potocal.o(i.USART1_rxDataHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART1_rxDataHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_idle_callback
</UL>

<P><STRONG><a name="[4d]"></a>USART2_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[ea]"></a>USART2_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, uart_drv.o(i.USART2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART2_Init &rArr; DMAEx_MultiBufferStart_NoIT
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMAEx_MultiBufferStart_NoIT
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRIVER_Init
</UL>

<P><STRONG><a name="[1d5]"></a>USART2_rxDataHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usart_potocal.o(i.USART2_rxDataHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART2_rxDataHandler &rArr; Rc_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_m1_rxcplt_callback
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_m0_rxcplt_callback
</UL>

<P><STRONG><a name="[4e]"></a>USART3_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART3_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[ed]"></a>USART3_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, uart_drv.o(i.USART3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART3_Init &rArr; DMA_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRIVER_Init
</UL>

<P><STRONG><a name="[277]"></a>USART3_rxDataHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usart_potocal.o(i.USART3_rxDataHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART3_rxDataHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_idle_callback
</UL>

<P><STRONG><a name="[274]"></a>USART4_rxDataHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usart_potocal.o(i.USART4_rxDataHandler))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_idle_callback
</UL>

<P><STRONG><a name="[ec]"></a>USART5_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, uart_drv.o(i.USART5_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART5_Init &rArr; DMA_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRIVER_Init
</UL>

<P><STRONG><a name="[275]"></a>USART5_rxDataHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usart_potocal.o(i.USART5_rxDataHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART5_rxDataHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_idle_callback
</UL>

<P><STRONG><a name="[c9]"></a>Up_RX</STRONG> (Thumb, 126 bytes, Stack size 12 bytes, slave.o(i.Up_RX))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Up_RX
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_rxDataHandler
</UL>

<P><STRONG><a name="[1cd]"></a>Up_Send</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, slave.o(i.Up_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Up_Send &rArr; HXZP_Tx_uint8 &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HXZP_Tx_uint8
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_normal_task
</UL>

<P><STRONG><a name="[22]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1c5]"></a>VISION_TEST</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, auto.o(i.VISION_TEST))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = VISION_TEST &rArr; GIMBAL_INIT_CTRL &rArr; GIMBAL_CHAS_FRI_CTRL &rArr; PIT_MEC_CTRL &rArr; Gimbal_Pitch_MEC_Output &rArr; PID_CAL
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Current
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_INIT_CTRL
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_AUTO_Ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_CENTER
</UL>

<P><STRONG><a name="[1c4]"></a>VISION_TEST_OPEN</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, state.o(i.VISION_TEST_OPEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VISION_TEST_OPEN
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATE_CENTER
</UL>

<P><STRONG><a name="[1d7]"></a>Verify_CRC16_Check_Sum</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, crc.o(i.Verify_CRC16_Check_Sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Verify_CRC16_Check_Sum &rArr; Get_CRC16_Check_Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CRC16_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_sensor_update
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vision_update
</UL>

<P><STRONG><a name="[1d9]"></a>Verify_CRC8_Check_Sum</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, crc.o(i.Verify_CRC8_Check_Sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Verify_CRC8_Check_Sum &rArr; Get_CRC8_Check_Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CRC8_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_sensor_update
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vision_update
</UL>

<P><STRONG><a name="[1d0]"></a>Vision_IRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, auto.o(i.Vision_IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Vision_IRQ &rArr; DF_AUTO_SHOOT
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DF_AUTO_SHOOT
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[188]"></a>WS_Channel</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, rc.o(i.WS_Channel))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Channel_Update
</UL>

<P><STRONG><a name="[102]"></a>YAW_AUTO_CTRL</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gimbal.o(i.YAW_AUTO_CTRL))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = YAW_AUTO_CTRL &rArr; Gimbal_Yaw_Auto_Output &rArr; PID_CAL
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_Yaw_Auto_Output
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimb_Yaw_AUTO_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_AUTO_FRI_CTRL
</UL>

<P><STRONG><a name="[107]"></a>YAW_IMU_CTRL</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gimbal.o(i.YAW_IMU_CTRL))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = YAW_IMU_CTRL &rArr; Gimbal_Yaw_IMU_Output &rArr; PID_CAL
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_Yaw_IMU_Output
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimb_Yaw_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_GIMB_FRI_CTRL
</UL>

<P><STRONG><a name="[105]"></a>YAW_MEC_CTRL</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gimbal.o(i.YAW_MEC_CTRL))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = YAW_MEC_CTRL &rArr; Gimbal_Yaw_MEC_Output &rArr; PID_CAL
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_Yaw_MEC_Output
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_CHAS_FRI_CTRL
</UL>

<P><STRONG><a name="[10c]"></a>Yaw_Mec_Err</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gimbal.o(i.Yaw_Mec_Err))
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Half_Turn
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_INIT_CTRL
</UL>

<P><STRONG><a name="[d7]"></a>Yaw_Turn_Err</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gimbal.o(i.Yaw_Turn_Err))
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Half_Turn
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chas_f_init
</UL>

<P><STRONG><a name="[9e]"></a>ZM_AUTO_SHOOT</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, auto.o(i.ZM_AUTO_SHOOT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ZM_AUTO_SHOOT
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_SHOOT_CTRL
</UL>

<P><STRONG><a name="[fd]"></a>ZM_STATE</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, auto.o(i.ZM_STATE))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_AUTO_Ctrl
</UL>

<P><STRONG><a name="[1e1]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[a9]"></a>__hardfp_asin</STRONG> (Thumb, 770 bytes, Stack size 88 bytes, asin.o(i.__hardfp_asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __hardfp_asin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Get_EulerAngle
</UL>

<P><STRONG><a name="[1e6]"></a>__hardfp_atan</STRONG> (Thumb, 622 bytes, Stack size 48 bytes, atan.o(i.__hardfp_atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[a8]"></a>__hardfp_atan2</STRONG> (Thumb, 432 bytes, Stack size 48 bytes, atan2.o(i.__hardfp_atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Get_EulerAngle
</UL>

<P><STRONG><a name="[1e3]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[1de]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[1e7]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[1e0]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[1e2]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[294]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[295]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[296]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1df]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[1e8]"></a>atan</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[b1]"></a>bmi270_init</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, bmi270.o(i.bmi270_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = bmi270_init &rArr; bmi2_get_gyro_cross_sense &rArr; bmi2_get_sensor_data &rArr; get_gyro_cross_sense &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_sec_init
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_gyro_cross_sense
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Init
</UL>

<P><STRONG><a name="[b0]"></a>bmi2_error_codes_print_result</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bmi2_common.o(i.bmi2_error_codes_print_result))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_gyro
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_accel
</UL>

<P><STRONG><a name="[20a]"></a>bmi2_extract_input_feat_config</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, bmi2.o(i.bmi2_extract_input_feat_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up_wh_config
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up_wh
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up_config
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gesture_wh
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gesture
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gest_w_config
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gest_config
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wake_up_config
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wake_up
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_up_hold_to_wake_config
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_up_hold_to_wake
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_triple_tap
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tilt_config
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tilt
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_detector
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_counter
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_count_params_config
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_config
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_activity
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_single_tap
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sig_motion_config
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sig_motion
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_primary_ois_config
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_orientation
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_orient_config
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_no_motion_config
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_no_motion
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_low_g_config
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_low_g
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_high_g_config
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_high_g
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_user_gain_config
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_user_gain
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_self_offset_corr
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_glance_detector
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_glance_detect_config
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_free_fall_det_config
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_free_fall_det
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flat_config
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flat
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_feat_accel_self_test
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ext_sens_sync_config
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ext_sens_sync
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_double_tap
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_any_motion_config
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_any_motion
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_act_recog
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wrist_wear_wake_up_wh_config
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wrist_wear_wake_up_config
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wrist_gest_w_config
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wrist_gest_config
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wake_up_config
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_up_hold_to_wake_config
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tilt_config
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_step_count_params_config
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_step_config
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sig_motion_config
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_orient_config
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_no_motion_config
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_low_g_config
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_high_g_config
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_gain_update_config
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_glance_detect_config
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_fall_det_config
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_flat_config
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ext_sens_sync_config
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_any_motion_config
</UL>

<P><STRONG><a name="[1eb]"></a>bmi2_get_feat_config</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, bmi2.o(i.bmi2_get_feat_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up_wh_config
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up_wh
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up_config
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gesture_wh
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gesture
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gest_w_config
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gest_config
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wake_up_config
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wake_up
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_up_hold_to_wake_config
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_up_hold_to_wake
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_triple_tap
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tilt_config
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tilt
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_detector
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_counter
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_count_params_config
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_config
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_activity
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_single_tap
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sig_motion_config
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sig_motion
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_primary_ois_config
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_orientation
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_orient_config
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_no_motion_config
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_no_motion
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_low_g_config
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_low_g
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_high_g_config
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_high_g
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_user_gain_config
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_user_gain
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_self_offset_corr
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_glance_detector
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_glance_detect_config
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_free_fall_det_config
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_free_fall_det
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flat_config
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flat
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_feat_accel_self_test
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ext_sens_sync_config
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ext_sens_sync
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_double_tap
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_any_motion_config
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_any_motion
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_act_recog
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wrist_wear_wake_up_wh_config
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wrist_wear_wake_up_config
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wrist_gest_w_config
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wrist_gest_config
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wake_up_config
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_up_hold_to_wake_config
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tilt_config
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_step_counter_output
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_step_count_params_config
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_step_config
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sig_motion_config
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_orient_config
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ois_output
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nvm_error_status
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_no_motion_config
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_low_g_config
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_high_g_config
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_gain_update_status
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_gain_update_config
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_cross_sense
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_glance_detect_config
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_fall_det_config
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_flat_config
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ext_sens_sync_config
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_any_motion_config
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_self_test_status
</UL>

<P><STRONG><a name="[1ea]"></a>bmi2_get_gyro_cross_sense</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, bmi2.o(i.bmi2_get_gyro_cross_sense))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = bmi2_get_gyro_cross_sense &rArr; bmi2_get_sensor_data &rArr; get_gyro_cross_sense &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi270_init
</UL>

<P><STRONG><a name="[1f0]"></a>bmi2_get_internal_status</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bmi2.o(i.bmi2_get_internal_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = bmi2_get_internal_status &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_write_config_file
</UL>

<P><STRONG><a name="[1ed]"></a>bmi2_get_regs</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, bmi2.o(i.bmi2_get_regs))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_map_data_int
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_soft_reset
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_sec_init
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_status
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_internal_status
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config_load
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_aux_config
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_cross_sense
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_config
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_aux_config
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_config
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_aux_interface
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_error_status
</UL>

<P><STRONG><a name="[1c6]"></a>bmi2_get_sensor_config</STRONG> (Thumb, 570 bytes, Stack size 56 bytes, bmi2.o(i.bmi2_get_sensor_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = bmi2_get_sensor_config &rArr; get_step_count_params_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wrist_wear_wake_up_wh_config
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wrist_wear_wake_up_config
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wrist_gest_w_config
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wrist_gest_config
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wake_up_config
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_up_hold_to_wake_config
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tilt_config
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_step_count_params_config
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_step_config
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sig_motion_config
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_orient_config
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_no_motion_config
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_low_g_config
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_high_g_config
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_gain_update_config
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_config
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_glance_detect_config
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_fall_det_config
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_flat_config
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ext_sens_sync_config
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_aux_config
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_any_motion_config
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_config
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_gyro
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_accel
</UL>

<P><STRONG><a name="[1ef]"></a>bmi2_get_sensor_data</STRONG> (Thumb, 734 bytes, Stack size 72 bytes, bmi2.o(i.bmi2_get_sensor_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = bmi2_get_sensor_data &rArr; get_gyro_cross_sense &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_step_counter_output
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_remapped_data
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ois_output
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nvm_error_status
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_gain_update_status
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_cross_sense
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_self_test_status
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_acc_gyr_data
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_output_feat_config
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comp_gyro_cross_axis_sensitivity
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_gyro_cross_sense
</UL>

<P><STRONG><a name="[216]"></a>bmi2_get_status</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, bmi2.o(i.bmi2_get_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = bmi2_get_status &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_aux_interface
</UL>

<P><STRONG><a name="[af]"></a>bmi2_interface_selection</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, bmi2_common.o(i.bmi2_interface_selection))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Init
</UL>

<P><STRONG><a name="[1c7]"></a>bmi2_map_data_int</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, bmi2.o(i.bmi2_map_data_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = bmi2_map_data_int &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_gyro
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_accel
</UL>

<P><STRONG><a name="[1e9]"></a>bmi2_sec_init</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, bmi2.o(i.bmi2_sec_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = bmi2_sec_init &rArr; bmi2_soft_reset &rArr; bmi2_write_config_file &rArr; write_config_file &rArr; bmi2_set_adv_power_save &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_soft_reset
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi270_init
</UL>

<P><STRONG><a name="[b2]"></a>bmi2_sensor_enable</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, bmi2.o(i.bmi2_sensor_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = bmi2_sensor_enable &rArr; sensor_enable &rArr; set_feat_accel_self_test &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_sensor
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Init
</UL>

<P><STRONG><a name="[1f3]"></a>bmi2_set_adv_power_save</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, bmi2.o(i.bmi2_set_adv_power_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = bmi2_set_adv_power_save &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_config_file
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[1ec]"></a>bmi2_set_regs</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, bmi2.o(i.bmi2_set_regs))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bmi2_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_map_data_int
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_soft_reset
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_file
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up_wh_config
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up_wh
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up_config
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gesture_wh
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gesture
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gest_w_config
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gest_config
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wake_up_config
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wake_up
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_up_hold_to_wake_config
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_up_hold_to_wake
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_triple_tap
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tilt_config
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tilt
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_detector
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_counter
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_count_params_config
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_config
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_activity
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_single_tap
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sig_motion_config
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sig_motion
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_primary_ois_config
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_orientation
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_orient_config
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_no_motion_config
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_no_motion
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_low_g_config
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_low_g
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_high_g_config
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_high_g
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_user_gain_config
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_user_gain
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_self_offset_corr
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_config
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_glance_detector
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_glance_detect_config
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_free_fall_det_config
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_free_fall_det
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flat_config
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flat
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_feat_accel_self_test
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ext_sens_sync_config
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ext_sens_sync
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_double_tap
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config_load
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_aux_config
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_any_motion_config
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_any_motion
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_act_recog
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_config
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_aux_interface
</UL>

<P><STRONG><a name="[1c8]"></a>bmi2_set_sensor_config</STRONG> (Thumb, 486 bytes, Stack size 24 bytes, bmi2.o(i.bmi2_set_sensor_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = bmi2_set_sensor_config &rArr; set_step_count_params_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up_wh_config
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up_config
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gest_w_config
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gest_config
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wake_up_config
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_up_hold_to_wake_config
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tilt_config
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_count_params_config
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_config
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sig_motion_config
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_primary_ois_config
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_orient_config
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_no_motion_config
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_low_g_config
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_high_g_config
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_user_gain_config
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_config
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_glance_detect_config
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_free_fall_det_config
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flat_config
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ext_sens_sync_config
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_aux_config
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_any_motion_config
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_config
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_gyro
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_accel
</UL>

<P><STRONG><a name="[217]"></a>bmi2_soft_reset</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, bmi2.o(i.bmi2_soft_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = bmi2_soft_reset &rArr; bmi2_write_config_file &rArr; write_config_file &rArr; bmi2_set_adv_power_save &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_write_config_file
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_sec_init
</UL>

<P><STRONG><a name="[232]"></a>bmi2_write_config_file</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, bmi2.o(i.bmi2_write_config_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = bmi2_write_config_file &rArr; write_config_file &rArr; bmi2_set_adv_power_save &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_internal_status
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_config_file
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_soft_reset
</UL>

<P><STRONG><a name="[234]"></a>can_send_0x2E</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, cap_protocol.o(i.can_send_0x2E))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = can_send_0x2E &rArr; CAN_SendData &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cap_rp_ctrl
</UL>

<P><STRONG><a name="[235]"></a>can_send_0x2F</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, cap_protocol.o(i.can_send_0x2F))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = can_send_0x2F &rArr; CAN_SendData &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cap_rp_ctrl
</UL>

<P><STRONG><a name="[d]"></a>cap_rp_ctrl</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, super.o(i.cap_rp_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = cap_rp_ctrl &rArr; can_send_0x2F &rArr; CAN_SendData &rArr; HAL_CAN_AddTxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_message
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_send_0x2F
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_send_0x2E
</UL>
<BR>[Address Reference Count : 1]<UL><LI> super.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>cap_rp_heart_beat</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, super.o(i.cap_rp_heart_beat))
<BR>[Address Reference Count : 1]<UL><LI> super.o(.data)
</UL>
<P><STRONG><a name="[169]"></a>delay_us</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, haltick_drv.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = delay_us &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delay_us
</UL>

<P><STRONG><a name="[1b8]"></a>err_calculation</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pid.o(i.err_calculation))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_CAL
</UL>

<P><STRONG><a name="[1e4]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[1f2]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
</UL>

<P><STRONG><a name="[1b5]"></a>imu_offline_check</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, imu.o(i.imu_offline_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = imu_offline_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OFFLINE_CHECK_TASK
</UL>

<P><STRONG><a name="[9]"></a>imu_sensor_init</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, soft_iic_potocal.o(i.imu_sensor_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = imu_sensor_init &rArr; BMI_Init &rArr; Set_gyro &rArr; bmi2_get_sensor_config &rArr; get_step_count_params_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Get_GRO
</UL>
<BR>[Address Reference Count : 1]<UL><LI> imu.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>imu_sensor_update</STRONG> (Thumb, 640 bytes, Stack size 56 bytes, soft_iic_potocal.o(i.imu_sensor_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = imu_sensor_update &rArr; BMI_Get_EulerAngle &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_f32
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Half_Turn
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cos_f32
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Get_RawData
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Get_EulerAngle
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUDGE_NULL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> imu.o(.data)
</UL>
<P><STRONG><a name="[a6]"></a>inVSqrt</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, bmi.o(i.inVSqrt))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Get_EulerAngle
</UL>

<P><STRONG><a name="[ce]"></a>int16_to_float</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cap_protocol.o(i.int16_to_float))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_rxDataHandler
</UL>

<P><STRONG><a name="[18]"></a>judge_sensor_init</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, judge_infantrypotocol.o(i.judge_sensor_init))
<BR>[Address Reference Count : 1]<UL><LI> judge_sensor.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>judge_sensor_update</STRONG> (Thumb, 500 bytes, Stack size 32 bytes, judge_infantrypotocol.o(i.judge_sensor_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + In Cycle
<LI>Call Chain = judge_sensor_update &rArr;  judge_sensor_update (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Determine_ID
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_sensor_update
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_CRC8_Check_Sum
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_CRC16_Check_Sum
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_sensor_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> judge_sensor.o(.data)
</UL>
<P><STRONG><a name="[78]"></a>main</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = main &rArr; MX_FREERTOS_Init &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Refresh
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRIVER_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEVICE_Init
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART5_Init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DAC_Init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN2_Init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1f1]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
</UL>

<P><STRONG><a name="[239]"></a>micros</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, haltick_drv.o(i.micros))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = micros
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>

<P><STRONG><a name="[12]"></a>motor_check</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, motor.o(i.motor_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = motor_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>motor_heart_beat</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, motor.o(i.motor_heart_beat))
<BR>[Address Reference Count : 1]<UL><LI> motor.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>motor_init</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, motor.o(i.motor_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = motor_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor.o(.data)
</UL>
<P><STRONG><a name="[1b6]"></a>motor_offline_check</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, motor.o(i.motor_offline_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = motor_offline_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OFFLINE_CHECK_TASK
</UL>

<P><STRONG><a name="[11]"></a>motor_update</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, motor.o(i.motor_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = motor_update &rArr; MID_RESET
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MID_RESET
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor.o(.data)
</UL>
<P><STRONG><a name="[1cb]"></a>osDelay</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cmsis_os.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_normal_task
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_chassis_task
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_led
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[23f]"></a>osKernelStart</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osKernelStart &rArr; vTaskStartScheduler &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19c]"></a>osThreadCreate</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, cmsis_os.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeFreeRtosPriority
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
</UL>

<P><STRONG><a name="[252]"></a>pvPortMalloc</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[251]"></a>pxPortInitialiseStack</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[1b3]"></a>rc_offline_check</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rc.o(i.rc_offline_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rc_offline_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OFFLINE_CHECK_TASK
</UL>

<P><STRONG><a name="[5]"></a>rc_sensor_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rc.o(i.rc_sensor_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rc_sensor_init &rArr; RC_ResetData
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_ResetData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rc.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>rc_sensor_update</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, rc.o(i.rc_sensor_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rc_sensor_update &rArr; Mouse_Updata &rArr; Mouse_Y_Speed
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_IsChannelReset
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mouse_Updata
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rc.o(.data)
</UL>
<P><STRONG><a name="[1c2]"></a>res_shot_time</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, state.o(i.res_shot_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = res_shot_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHOT_STAY_init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHOT_SINGLE_init
</UL>

<P><STRONG><a name="[236]"></a>set_message</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, cap_protocol.o(i.set_message))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cap_rp_ctrl
</UL>

<P><STRONG><a name="[1b9]"></a>single_pid_ctrl</STRONG> (Thumb, 190 bytes, Stack size 0 bytes, pid.o(i.single_pid_ctrl))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_CAL
</UL>

<P><STRONG><a name="[1b7]"></a>slave_heart_beat</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, slave.o(i.slave_heart_beat))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OFFLINE_CHECK_TASK
</UL>

<P><STRONG><a name="[1e5]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt_full.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[80]"></a>user_delay_us</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bmi2_common.o(i.user_delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = user_delay_us &rArr; delay_us &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bmi2_common.o(i.bmi2_interface_selection)
</UL>
<P><STRONG><a name="[7e]"></a>user_i2c_reg_read</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, bmi2_common.o(i.user_i2c_reg_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = user_i2c_reg_read &rArr; MPU_Read_Byte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_us &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bmi2_common.o(i.bmi2_interface_selection)
</UL>
<P><STRONG><a name="[7f]"></a>user_i2c_reg_write</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, bmi2_common.o(i.user_i2c_reg_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = user_i2c_reg_write &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_us &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bmi2_common.o(i.bmi2_interface_selection)
</UL>
<P><STRONG><a name="[246]"></a>uxListRemove</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[27b]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, freertos.o(i.vApplicationGetIdleTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[24b]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[250]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[248]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[247]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[24a]"></a>vPortEnterCritical</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[24c]"></a>vPortExitCritical</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[24e]"></a>vPortFree</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[27e]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[279]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, port.o(i.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
</UL>

<P><STRONG><a name="[240]"></a>vTaskDelay</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[241]"></a>vTaskStartScheduler</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = vTaskStartScheduler &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[253]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[89]"></a>vTaskSwitchContext</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[14]"></a>vision_init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, vision_potocol.o(i.vision_init))
<BR>[Address Reference Count : 1]<UL><LI> vision_sensor.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>vision_update</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, vision_potocol.o(i.vision_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = vision_update &rArr; Verify_CRC8_Check_Sum &rArr; Get_CRC8_Check_Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_CRC8_Check_Sum
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_CRC16_Check_Sum
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vision_sensor.o(.data)
</UL>
<P><STRONG><a name="[27c]"></a>xPortStartScheduler</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[244]"></a>xTaskCreate</STRONG> (Thumb, 90 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[243]"></a>xTaskCreateStatic</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, tasks.o(i.xTaskCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xTaskCreateStatic &rArr; prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[27d]"></a>xTaskGetTickCountFromISR</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tasks.o(i.xTaskGetTickCountFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskGetTickCountFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vision_update
</UL>

<P><STRONG><a name="[1ce]"></a>xTaskIncrementTick</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[256]"></a>xTaskResumeAll</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[7]"></a>rc_sensor_check</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, rc.o(i.rc_sensor_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rc_sensor_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rc.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>rc_sensor_heart_beat</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rc.o(i.rc_sensor_heart_beat))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rc_sensor_heart_beat &rArr; RC_ResetData
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_ResetData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rc.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>imu_sensor_check</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, imu.o(i.imu_sensor_check))
<BR>[Address Reference Count : 1]<UL><LI> imu.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>imu_sensor_heart_beat</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, imu.o(i.imu_sensor_heart_beat))
<BR>[Address Reference Count : 1]<UL><LI> imu.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>vision_check</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, vision_sensor.o(i.vision_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vision_check
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vision_sensor.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>vision_heart_beat</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, vision_sensor.o(i.vision_heart_beat))
<BR>[Address Reference Count : 1]<UL><LI> vision_sensor.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>judge_sensor_check</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, judge_sensor.o(i.judge_sensor_check))
<BR>[Address Reference Count : 1]<UL><LI> judge_sensor.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>judge_sensor_heart_beat</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, judge_sensor.o(i.judge_sensor_heart_beat))
<BR>[Address Reference Count : 1]<UL><LI> judge_sensor.o(.data)
</UL>
<P><STRONG><a name="[a4]"></a>lsb_to_dps</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, bmi.o(i.lsb_to_dps))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Get_EulerAngle
</UL>

<P><STRONG><a name="[a5]"></a>lsb_to_mps2</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, bmi.o(i.lsb_to_mps2))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Get_EulerAngle
</UL>

<P><STRONG><a name="[237]"></a>cfg_error_status</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, bmi2.o(i.cfg_error_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = cfg_error_status &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_config
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_config
</UL>

<P><STRONG><a name="[272]"></a>check_boundary_val</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, bmi2.o(i.check_boundary_val))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = check_boundary_val
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_config
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_aux_config
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_config
</UL>

<P><STRONG><a name="[20d]"></a>comp_gyro_cross_axis_sensitivity</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bmi2.o(i.comp_gyro_cross_axis_sensitivity))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
</UL>

<P><STRONG><a name="[238]"></a>config_aux_interface</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, bmi2.o(i.config_aux_interface))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = config_aux_interface &rArr; bmi2_get_status &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_status
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_aux_config
</UL>

<P><STRONG><a name="[210]"></a>extract_output_feat_config</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, bmi2.o(i.extract_output_feat_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = extract_output_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_step_counter_output
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ois_output
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nvm_error_status
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_gain_update_status
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_cross_sense
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_self_test_status
</UL>

<P><STRONG><a name="[20c]"></a>get_acc_gyr_data</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bmi2.o(i.get_acc_gyr_data))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
</UL>

<P><STRONG><a name="[1f4]"></a>get_accel_config</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, bmi2.o(i.get_accel_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = get_accel_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[214]"></a>get_accel_self_test_status</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, bmi2.o(i.get_accel_self_test_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = get_accel_self_test_status &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_output_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
</UL>

<P><STRONG><a name="[1f8]"></a>get_any_motion_config</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, bmi2.o(i.get_any_motion_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = get_any_motion_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[1f6]"></a>get_aux_config</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, bmi2.o(i.get_aux_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = get_aux_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[205]"></a>get_ext_sens_sync_config</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, bmi2.o(i.get_ext_sens_sync_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = get_ext_sens_sync_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[204]"></a>get_flat_config</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, bmi2.o(i.get_flat_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = get_flat_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[20b]"></a>get_free_fall_det_config</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, bmi2.o(i.get_free_fall_det_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = get_free_fall_det_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[1ff]"></a>get_glance_detect_config</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, bmi2.o(i.get_glance_detect_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = get_glance_detect_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[1f5]"></a>get_gyro_config</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, bmi2.o(i.get_gyro_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = get_gyro_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[213]"></a>get_gyro_cross_sense</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, bmi2.o(i.get_gyro_cross_sense))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = get_gyro_cross_sense &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_output_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
</UL>

<P><STRONG><a name="[1fc]"></a>get_gyro_gain_update_config</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, bmi2.o(i.get_gyro_gain_update_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = get_gyro_gain_update_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[211]"></a>get_gyro_gain_update_status</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, bmi2.o(i.get_gyro_gain_update_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = get_gyro_gain_update_status &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_output_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
</UL>

<P><STRONG><a name="[202]"></a>get_high_g_config</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, bmi2.o(i.get_high_g_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = get_high_g_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[203]"></a>get_low_g_config</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, bmi2.o(i.get_low_g_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = get_low_g_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[1f9]"></a>get_no_motion_config</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, bmi2.o(i.get_no_motion_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = get_no_motion_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[212]"></a>get_nvm_error_status</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, bmi2.o(i.get_nvm_error_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = get_nvm_error_status &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_output_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
</UL>

<P><STRONG><a name="[215]"></a>get_ois_output</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, bmi2.o(i.get_ois_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = get_ois_output &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_output_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
</UL>

<P><STRONG><a name="[201]"></a>get_orient_config</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, bmi2.o(i.get_orient_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = get_orient_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[20e]"></a>get_remapped_data</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, bmi2.o(i.get_remapped_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_remapped_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
</UL>

<P><STRONG><a name="[1f7]"></a>get_sig_motion_config</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, bmi2.o(i.get_sig_motion_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = get_sig_motion_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[1fb]"></a>get_step_config</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, bmi2.o(i.get_step_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = get_step_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[1fa]"></a>get_step_count_params_config</STRONG> (Thumb, 170 bytes, Stack size 72 bytes, bmi2.o(i.get_step_count_params_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = get_step_count_params_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[20f]"></a>get_step_counter_output</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, bmi2.o(i.get_step_counter_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = get_step_counter_output &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_output_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
</UL>

<P><STRONG><a name="[1fd]"></a>get_tilt_config</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, bmi2.o(i.get_tilt_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = get_tilt_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[1fe]"></a>get_up_hold_to_wake_config</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, bmi2.o(i.get_up_hold_to_wake_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = get_up_hold_to_wake_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[200]"></a>get_wake_up_config</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, bmi2.o(i.get_wake_up_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = get_wake_up_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[206]"></a>get_wrist_gest_config</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, bmi2.o(i.get_wrist_gest_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = get_wrist_gest_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[208]"></a>get_wrist_gest_w_config</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, bmi2.o(i.get_wrist_gest_w_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = get_wrist_gest_w_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[207]"></a>get_wrist_wear_wake_up_config</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, bmi2.o(i.get_wrist_wear_wake_up_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = get_wrist_wear_wake_up_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[209]"></a>get_wrist_wear_wake_up_wh_config</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, bmi2.o(i.get_wrist_wear_wake_up_wh_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = get_wrist_wear_wake_up_wh_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[1ee]"></a>null_ptr_check</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bmi2.o(i.null_ptr_check))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_sensor_enable
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_write_config_file
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_soft_reset
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_sec_init
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_status
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_internal_status
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_gyro_cross_sense
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_config
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_aux_config
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_config
</UL>

<P><STRONG><a name="[218]"></a>select_sensor</STRONG> (Thumb, 334 bytes, Stack size 16 bytes, bmi2.o(i.select_sensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = select_sensor
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_sensor_enable
</UL>

<P><STRONG><a name="[219]"></a>sensor_enable</STRONG> (Thumb, 958 bytes, Stack size 56 bytes, bmi2.o(i.sensor_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = sensor_enable &rArr; set_feat_accel_self_test &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up_wh
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gesture_wh
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gesture
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wake_up
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_up_hold_to_wake
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_triple_tap
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tilt
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_detector
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_counter
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_activity
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_single_tap
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sig_motion
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_orientation
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_no_motion
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_low_g
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_high_g
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_user_gain
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_self_offset_corr
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_glance_detector
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_free_fall_det
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flat
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_feat_accel_self_test
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ext_sens_sync
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_double_tap
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_any_motion
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_act_recog
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_sensor_enable
</UL>

<P><STRONG><a name="[21a]"></a>set_accel_config</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, bmi2.o(i.set_accel_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = set_accel_config &rArr; cfg_error_status &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_boundary_val
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_error_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[26f]"></a>set_act_recog</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, bmi2.o(i.set_act_recog))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_act_recog &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[258]"></a>set_any_motion</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, bmi2.o(i.set_any_motion))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_any_motion &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[21d]"></a>set_any_motion_config</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, bmi2.o(i.set_any_motion_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = set_any_motion_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[21c]"></a>set_aux_config</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, bmi2.o(i.set_aux_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_aux_config &rArr; config_aux_interface &rArr; bmi2_get_status &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_aux_interface
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_boundary_val
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[273]"></a>set_config_load</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, bmi2.o(i.set_config_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = set_config_load &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_config_file
</UL>

<P><STRONG><a name="[263]"></a>set_double_tap</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, bmi2.o(i.set_double_tap))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_double_tap &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[269]"></a>set_ext_sens_sync</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, bmi2.o(i.set_ext_sens_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_ext_sens_sync &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[22b]"></a>set_ext_sens_sync_config</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, bmi2.o(i.set_ext_sens_sync_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = set_ext_sens_sync_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[270]"></a>set_feat_accel_self_test</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, bmi2.o(i.set_feat_accel_self_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = set_feat_accel_self_test &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[268]"></a>set_flat</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, bmi2.o(i.set_flat))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_flat &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[22a]"></a>set_flat_config</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, bmi2.o(i.set_flat_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = set_flat_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[271]"></a>set_free_fall_det</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, bmi2.o(i.set_free_fall_det))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_free_fall_det &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[231]"></a>set_free_fall_det_config</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, bmi2.o(i.set_free_fall_det_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = set_free_fall_det_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[225]"></a>set_glance_detect_config</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, bmi2.o(i.set_glance_detect_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = set_glance_detect_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[260]"></a>set_glance_detector</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, bmi2.o(i.set_glance_detector))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_glance_detector &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[21b]"></a>set_gyro_config</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, bmi2.o(i.set_gyro_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = set_gyro_config &rArr; cfg_error_status &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_boundary_val
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_error_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[26a]"></a>set_gyro_self_offset_corr</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, bmi2.o(i.set_gyro_self_offset_corr))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_gyro_self_offset_corr &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[25d]"></a>set_gyro_user_gain</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, bmi2.o(i.set_gyro_user_gain))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_gyro_user_gain &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[222]"></a>set_gyro_user_gain_config</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, bmi2.o(i.set_gyro_user_gain_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = set_gyro_user_gain_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[266]"></a>set_high_g</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, bmi2.o(i.set_high_g))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_high_g &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[228]"></a>set_high_g_config</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, bmi2.o(i.set_high_g_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = set_high_g_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[267]"></a>set_low_g</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, bmi2.o(i.set_low_g))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_low_g &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[229]"></a>set_low_g_config</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, bmi2.o(i.set_low_g_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = set_low_g_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[259]"></a>set_no_motion</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, bmi2.o(i.set_no_motion))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_no_motion &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[21e]"></a>set_no_motion_config</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, bmi2.o(i.set_no_motion_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = set_no_motion_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[227]"></a>set_orient_config</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, bmi2.o(i.set_orient_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = set_orient_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[265]"></a>set_orientation</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, bmi2.o(i.set_orientation))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_orientation &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[230]"></a>set_primary_ois_config</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, bmi2.o(i.set_primary_ois_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = set_primary_ois_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[257]"></a>set_sig_motion</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, bmi2.o(i.set_sig_motion))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_sig_motion &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[21f]"></a>set_sig_motion_config</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, bmi2.o(i.set_sig_motion_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = set_sig_motion_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[262]"></a>set_single_tap</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, bmi2.o(i.set_single_tap))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_single_tap &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[25c]"></a>set_step_activity</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, bmi2.o(i.set_step_activity))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_step_activity &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[221]"></a>set_step_config</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, bmi2.o(i.set_step_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = set_step_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[220]"></a>set_step_count_params_config</STRONG> (Thumb, 212 bytes, Stack size 72 bytes, bmi2.o(i.set_step_count_params_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = set_step_count_params_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[25b]"></a>set_step_counter</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, bmi2.o(i.set_step_counter))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_step_counter &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[25a]"></a>set_step_detector</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, bmi2.o(i.set_step_detector))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_step_detector &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[25e]"></a>set_tilt</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, bmi2.o(i.set_tilt))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_tilt &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[223]"></a>set_tilt_config</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, bmi2.o(i.set_tilt_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = set_tilt_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[264]"></a>set_triple_tap</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, bmi2.o(i.set_triple_tap))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_triple_tap &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[25f]"></a>set_up_hold_to_wake</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, bmi2.o(i.set_up_hold_to_wake))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_up_hold_to_wake &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[224]"></a>set_up_hold_to_wake_config</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, bmi2.o(i.set_up_hold_to_wake_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = set_up_hold_to_wake_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[261]"></a>set_wake_up</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, bmi2.o(i.set_wake_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_wake_up &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[226]"></a>set_wake_up_config</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, bmi2.o(i.set_wake_up_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = set_wake_up_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[22c]"></a>set_wrist_gest_config</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, bmi2.o(i.set_wrist_gest_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = set_wrist_gest_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[22e]"></a>set_wrist_gest_w_config</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, bmi2.o(i.set_wrist_gest_w_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = set_wrist_gest_w_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[26b]"></a>set_wrist_gesture</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, bmi2.o(i.set_wrist_gesture))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_wrist_gesture &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[26d]"></a>set_wrist_gesture_wh</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, bmi2.o(i.set_wrist_gesture_wh))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_wrist_gesture_wh &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[26c]"></a>set_wrist_wear_wake_up</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, bmi2.o(i.set_wrist_wear_wake_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_wrist_wear_wake_up &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[22d]"></a>set_wrist_wear_wake_up_config</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, bmi2.o(i.set_wrist_wear_wake_up_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = set_wrist_wear_wake_up_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[26e]"></a>set_wrist_wear_wake_up_wh</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, bmi2.o(i.set_wrist_wear_wake_up_wh))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = set_wrist_wear_wake_up_wh &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[22f]"></a>set_wrist_wear_wake_up_wh_config</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, bmi2.o(i.set_wrist_wear_wake_up_wh_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = set_wrist_wear_wake_up_wh_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[278]"></a>upload_file</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, bmi2.o(i.upload_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = upload_file &rArr; bmi2_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_config_file
</UL>

<P><STRONG><a name="[233]"></a>write_config_file</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, bmi2.o(i.write_config_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = write_config_file &rArr; bmi2_set_adv_power_save &rArr; bmi2_get_regs &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_file
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config_load
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_write_config_file
</UL>

<P><STRONG><a name="[1d4]"></a>DMAEx_MultiBufferStart_NoIT</STRONG> (Thumb, 564 bytes, Stack size 36 bytes, uart_drv.o(i.DMAEx_MultiBufferStart_NoIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DMAEx_MultiBufferStart_NoIT
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Init
</UL>

<P><STRONG><a name="[1d3]"></a>DMA_Start</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, uart_drv.o(i.DMA_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_Init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
</UL>

<P><STRONG><a name="[7b]"></a>dma_m0_rxcplt_callback</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, uart_drv.o(i.dma_m0_rxcplt_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_m0_rxcplt_callback &rArr; USART2_rxDataHandler &rArr; Rc_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_rxDataHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_drv.o(i.DMAEx_MultiBufferStart_NoIT)
</UL>
<P><STRONG><a name="[7c]"></a>dma_m1_rxcplt_callback</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, uart_drv.o(i.dma_m1_rxcplt_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_m1_rxcplt_callback &rArr; USART2_rxDataHandler &rArr; Rc_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_rxDataHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_drv.o(i.DMAEx_MultiBufferStart_NoIT)
</UL>
<P><STRONG><a name="[f0]"></a>uart_rx_idle_callback</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, uart_drv.o(i.uart_rx_idle_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_rx_idle_callback &rArr; USART5_rxDataHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_rxDataHandler
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_rxDataHandler
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_rxDataHandler
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_rxDataHandler
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_IRQHandler
</UL>

<P><STRONG><a name="[bd]"></a>CAN_Filter_ParamsInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, can_drv.o(i.CAN_Filter_ParamsInit))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Init
</UL>

<P><STRONG><a name="[cb]"></a>CAN_Rx_Callback</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, can_drv.o(i.CAN_Rx_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CAN_Rx_Callback &rArr; CAN2_rxDataHandler &rArr; MOTOR_CAN2_RX
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_rxDataHandler
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_rxDataHandler
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_GetRxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxFifo0MsgPendingCallback
</UL>

<P><STRONG><a name="[167]"></a>__NVIC_SystemReset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[245]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[249]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvAddNewTaskToReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[24d]"></a>prvDeleteTCB</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[82]"></a>prvIdleTask</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvIdleTask &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[24f]"></a>prvInitialiseNewTask</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[281]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[242]"></a>makeFreeRtosPriority</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmsis_os.o(i.makeFreeRtosPriority))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[254]"></a>prvHeapInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[255]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[81]"></a>prvTaskExitError</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[11a]"></a>ADC_Init</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, stm32f4xx_hal_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[133]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.DMA_CalcBaseAndBitshift))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[132]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f4xx_hal_dma.o(i.DMA_CheckFifoParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_CheckFifoParam
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[13d]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[147]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[152]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[154]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(i.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[155]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[145]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[146]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[7d]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[15d]"></a>UART_EndRxTransfer</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[15c]"></a>UART_Receive_IT</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[164]"></a>UART_SetConfig</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
